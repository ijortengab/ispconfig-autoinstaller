#!/bin/bash

# Parse arguments. Generated by parse-options.sh.
_new_arguments=()
while [[ $# -gt 0 ]]; do
    case "$1" in
        --help) help=1; shift ;;
        --version) version=1; shift ;;
        --additional-info=*) additional_info="${1#*=}"; shift ;;
        --additional-info) if [[ ! $2 == "" && ! $2 =~ (^--$|^-[^-]|^--[^-]) ]]; then additional_info="$2"; shift; fi; shift ;;
        --domain=*) domain="${1#*=}"; shift ;;
        --domain) if [[ ! $2 == "" && ! $2 =~ (^--$|^-[^-]|^--[^-]) ]]; then domain="$2"; shift; fi; shift ;;
        --fast) fast=1; shift ;;
        --ip-address=*) ip_address="${1#*=}"; shift ;;
        --ip-address) if [[ ! $2 == "" && ! $2 =~ (^--$|^-[^-]|^--[^-]) ]]; then ip_address="$2"; shift; fi; shift ;;
        --root-sure) root_sure=1; shift ;;
        --[^-]*) shift ;;
        *) _new_arguments+=("$1"); shift ;;
    esac
done
set -- "${_new_arguments[@]}"
unset _new_arguments

# Common Functions.
red() { echo -ne "\e[91m" >&2; echo -n "$@" >&2; echo -ne "\e[39m" >&2; }
green() { echo -ne "\e[92m" >&2; echo -n "$@" >&2; echo -ne "\e[39m" >&2; }
yellow() { echo -ne "\e[93m" >&2; echo -n "$@" >&2; echo -ne "\e[39m" >&2; }
blue() { echo -ne "\e[94m" >&2; echo -n "$@" >&2; echo -ne "\e[39m" >&2; }
magenta() { echo -ne "\e[95m" >&2; echo -n "$@" >&2; echo -ne "\e[39m" >&2; }
error() { echo -n "$INDENT" >&2; red '#' "$@" >&2; echo >&2; }
success() { echo -n "$INDENT" >&2; green '#' "$@" >&2; echo >&2; }
chapter() { echo -n "$INDENT" >&2; yellow '#' "$@" >&2; echo >&2; }
title() { echo -n "$INDENT" >&2; blue '#' "$@" >&2; echo >&2; }
code() { echo -n "$INDENT" >&2; magenta "$@" >&2; echo >&2; }
x() { echo >&2; exit 1; }
e() { echo -n "$INDENT" >&2; echo -n "$@" >&2; }
_() { echo -n "$INDENT" >&2; echo -n "#" "$@" >&2; }
_,() { echo -n "$@" >&2; }
_.() { echo >&2; }
__() { echo -n "$INDENT" >&2; echo -n "#" '    ' >&2; [ -n "$1" ] && echo "$@" >&2 || echo -n  >&2; }
____() { echo >&2; [ -n "$delay" ] && sleep "$delay"; }

# Functions.
printVersion() {
    echo '0.9.6'
}
printHelp() {
    title RCM ISPConfig Setup
    _ 'Variation '; yellow Dump Variables; _.
    _ 'Version '; yellow `printVersion`; _.
    _.
    cat << 'EOF'
Usage: rcm-ispconfig-setup-dump-variables-init [options]

Options:

Global Options:
   --fast
        No delay every subtask.
   --version
        Print version of this script.
   --help
        Show this help.
   --root-sure
        Bypass root checking.

Environment Variables:
   SUBDOMAIN_ISPCONFIG
        Default to cp
   SUBDOMAIN_PHPMYADMIN
        Default to db
   SUBDOMAIN_ROUNDCUBE
        Default to mail
   MAILBOX_ADMIN
        Default to admin
   MAILBOX_SUPPORT
        Default to support
   MAILBOX_POST
        Default to postmaster
   MARIADB_PREFIX_MASTER
        Default to /usr/local/share/mariadb
   MARIADB_USERS_CONTAINER_MASTER
        Default to users
   DKIM_SELECTOR
        Default to default
EOF
}

# Help and Version.
[ -n "$help" ] && { printHelp; exit 1; }
[ -n "$version" ] && { printVersion; exit 1; }

# Title.
title rcm-ispconfig-setup-dump-variables-init
____

if [ -z "$root_sure" ];then
    chapter Mengecek akses root.
    if [[ "$EUID" -ne 0 ]]; then
        error This script needs to be run with superuser privileges.; x
    else
        __ Privileges.
    fi
    ____
fi

# Functions.
fileMustExists() {
    # global used:
    # global modified:
    # function used: __, success, error, x
    if [ -f "$1" ];then
        __; green File '`'$(basename "$1")'`' ditemukan.; _.
    else
        __; red File '`'$(basename "$1")'`' tidak ditemukan.; x
    fi
}
backupFile() {
    local mode="$1"
    local oldpath="$2" i newpath
    i=1
    newpath="${oldpath}.${i}"
    if [ -f "$newpath" ]; then
        let i++
        newpath="${oldpath}.${i}"
        while [ -f "$newpath" ] ; do
            let i++
            newpath="${oldpath}.${i}"
        done
    fi
    case $mode in
        move)
            mv "$oldpath" "$newpath" ;;
        copy)
            local user=$(stat -c "%U" "$oldpath")
            local group=$(stat -c "%G" "$oldpath")
            cp "$oldpath" "$newpath"
            chown ${user}:${group} "$newpath"
    esac
}
isFileExists() {
    # global used:
    # global modified: found, notfound
    # function used: __
    found=
    notfound=
    if [ -f "$1" ];then
        __ File '`'$(basename "$1")'`' ditemukan.
        found=1
    else
        __ File '`'$(basename "$1")'`' tidak ditemukan.
        notfound=1
    fi
}
populateDatabaseUserPassword() {
    local path="${MARIADB_PREFIX_MASTER}/${MARIADB_USERS_CONTAINER_MASTER}/$1"
    local DB_USER DB_USER_PASSWORD
    if [ -f "$path" ];then
        . "$path"
        db_user_password=$DB_USER_PASSWORD
    fi
}
databaseCredentialIspconfig() {
    local php_fpm_user prefix path
    php_fpm_user=ispconfig
    prefix=$(getent passwd "$php_fpm_user" | cut -d: -f6 )
    path="${prefix}/interface/lib/config.inc.php"
    db_user=$(php -r "include '$path';echo DB_USER;")
    db_user_password=$(php -r "include '$path';echo DB_PASSWORD;")
}
websiteCredentialIspconfig() {
    local ISPCONFIG_WEB_USER_PASSWORD
    path=/usr/local/share/ispconfig/credential/website
    [ -f "$path" ] || fileMustExists "$path"
    . "$path"
    ispconfig_web_user_password=$ISPCONFIG_WEB_USER_PASSWORD
}

# Require, validate, and populate value.
chapter Dump variable.
delay=.5; [ -n "$fast" ] && unset delay
SUBDOMAIN_ISPCONFIG=${SUBDOMAIN_ISPCONFIG:=cp}
code 'SUBDOMAIN_ISPCONFIG="'$SUBDOMAIN_ISPCONFIG'"'
SUBDOMAIN_PHPMYADMIN=${SUBDOMAIN_PHPMYADMIN:=db}
code 'SUBDOMAIN_PHPMYADMIN="'$SUBDOMAIN_PHPMYADMIN'"'
SUBDOMAIN_ROUNDCUBE=${SUBDOMAIN_ROUNDCUBE:=mail}
code 'SUBDOMAIN_ROUNDCUBE="'$SUBDOMAIN_ROUNDCUBE'"'
MAILBOX_ADMIN=${MAILBOX_ADMIN:=admin}
code 'MAILBOX_ADMIN="'$MAILBOX_ADMIN'"'
MAILBOX_SUPPORT=${MAILBOX_SUPPORT:=support}
code 'MAILBOX_SUPPORT="'$MAILBOX_SUPPORT'"'
MAILBOX_POST=${MAILBOX_POST:=postmaster}
code 'MAILBOX_POST="'$MAILBOX_POST'"'
MARIADB_PREFIX_MASTER=${MARIADB_PREFIX_MASTER:=/usr/local/share/mariadb}
code 'MARIADB_PREFIX_MASTER="'$MARIADB_PREFIX_MASTER'"'
MARIADB_USERS_CONTAINER_MASTER=${MARIADB_USERS_CONTAINER_MASTER:=users}
code 'MARIADB_USERS_CONTAINER_MASTER="'$MARIADB_USERS_CONTAINER_MASTER'"'
DKIM_SELECTOR=${DKIM_SELECTOR:=default}
code 'DKIM_SELECTOR="'$DKIM_SELECTOR'"'
if [ -z "$domain" ];then
    error "Argument --domain required."; x
fi
code 'domain="'$domain'"'
code 'ip_address="'$ip_address'"'
current_fqdn=$(hostname -f 2>/dev/null)
code current_fqdn="$current_fqdn"
code additional_info="$additional_info"
____

if [ -f /usr/local/share/ispconfig/domain/$domain/website ];then
    . /usr/local/share/ispconfig/domain/$domain/website

fi
[ -n "$URL_ISPCONFIG" ] || URL_ISPCONFIG=http://ispconfig.localhost/
if [ -f /usr/local/share/phpmyadmin/domain/$domain/website ];then
    . /usr/local/share/phpmyadmin/domain/$domain/website
fi
[ -n "$URL_PHPMYADMIN" ] || URL_PHPMYADMIN=http://phpmyadmin.localhost/
if [ -f /usr/local/share/roundcube/domain/$domain/website ];then
    . /usr/local/share/roundcube/domain/$domain/website
fi
[ -n "$URL_ROUNDCUBE" ] || URL_ROUNDCUBE=http://roundcube.localhost/

chapter Website available.
_ ' - ISPConfig  :' "$URL_ISPCONFIG"; _.
_ ' - PHPMyAdmin :' "$URL_PHPMYADMIN"; _.
_ ' - Roundcube  :' "$URL_ROUNDCUBE"; _.
____

chapter Roundcube Credentials.
_ ' - 'username: $MAILBOX_ADMIN; _.
if [ -n "$domain" ];then
    user="$MAILBOX_ADMIN"
    host="$domain"
    . /usr/local/share/credential/mailbox/$host/$user
    _ '   'password: $MAILBOX_USER_PASSWORD; _.
else
    _ '   'password: ...; _.
fi
_ ' - 'username: $MAILBOX_SUPPORT; _.
if [ -n "$domain" ];then
    user="$MAILBOX_SUPPORT"
    host="$domain"
    . /usr/local/share/credential/mailbox/$host/$user
    _ '   'password: $MAILBOX_USER_PASSWORD; _.
else
    _ '   'password: ...; _.
fi
____

chapter DNS TXT Record for SPF in $domain
mail_provider="$current_fqdn"
_ ' - 'hostname:; _.
_ '   'value'   ':' '; magenta "v=spf1 a:${mail_provider} ~all"; _.
____

chapter DNS TXT Record for DKIM in $domain
dns_record=$(INDENT+="    " rcm-ispconfig-control-manage-domain --fast --root-sure --ispconfig-soap-exists-sure --domain="$domain" get_dns_record 2>/dev/null)
_ ' - 'hostname:' '; magenta "${DKIM_SELECTOR}._domainkey"; _.
_ '   'value'   ':' '; magenta "v=DKIM1; t=s; p=${dns_record}"; _.
____

chapter DNS TXT Record for DMARC in $domain
email="${MAILBOX_POST}@${domain}"
_ ' - 'hostname:' '; magenta "_dmarc"; _.
_ '   'value'   ':' '; magenta "v=DMARC1; p=none; rua=${email}"; _.
____

if [ -n "$ip_address" ];then
    tempfile=$(mktemp -p /dev/shm -t rcm-ispconfig-setup-dump-variables.XXXXXX)
    dig -x $ip_address +short > "$tempfile"
    output=$(cat "$tempfile" | grep -v ^\; | head -1)
    rm "$tempfile"
    if [[ ! "$output" == "${current_fqdn}." ]];then
        error Attention
        _ Your PTR Record is different with your variable of FQDN.; _.
        _ ' - FQDN : '; magenta "$current_fqdn"; _.
        _ '   PTR  : '; magenta "$output"; _.
        ____
    fi
fi

chapter Manual Action
_ Command to create a new mailbox. Example:; _.
__; magenta ispconfig.php mail_user_add --email=support@${domain} --password=$(pwgen -1 12); _.
_ Command to implement '`'ispconfig.php'`' command autocompletion immediately:; _.
__; magenta source /etc/profile.d/ispconfig-php-completion.sh; _.
if [ -n "$ip_address" ];then
    _ Command to check PTR Record:; _.
    __; magenta dig -x "$ip_address" +short; _.
fi
_ If you want to see the credentials again, please execute this command:; _.
[[ -n "$ip_address" ]] && is_ip_address=' --ip-address='"$ip_address" || is_ip_address=
__; magenta rcm-ispconfig-setup-dump-variables${isfast} --domain="$domain" --hostname="$hostname"${is_ip_address}; _.
_ It is recommended for you to make sure DNS TXT Record about Mail Server '('SPF, DKIM, DMARC')' has exists,; _.
_ '    'please execute this command:; _.
__; magenta rcm install ispconfig-post-setup --source ispconfig; _.
__; magenta rcm ispconfig-post-setup${isfast} -- --domain="$domain"; _.
____

if [[ "$additional_info" == digitalocean ]];then
    chapter Suggestion.
    _ If you user of DigitalOcean, change your droplet name with FQDN to automatically set as PTR Record.; _.
    _ More info: https://www.digitalocean.com/community/questions/how-do-i-setup-a-ptr-record; _.
    ____
fi

exit 0

# parse-options.sh \
# --without-end-options-double-dash \
# --compact \
# --clean \
# --no-hash-bang \
# --no-original-arguments \
# --no-error-invalid-options \
# --no-error-require-arguments << EOF | clip
# FLAG=(
# --fast
# --version
# --help
# --root-sure
# )
# VALUE=(
# --domain
# --ip-address
# --additional-info
# )
# MULTIVALUE=(
# )
# FLAG_VALUE=(
# )
# CSV=(
# )
# EOF
# clear
